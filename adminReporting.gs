////////////////////////////////////////////////////////////////////////////////////
/////////////////// GIVING BLAKE VISIBILITY INTO CLIENT BEHAVIOR ///////////////////
////////////////////////////////////////////////////////////////////////////////////

/** Logs order behavior.
@param {orderer} string The orderer of a deposition.
@param {firm} string The firm the orderer works for.
*/
function addOrderToLog(orderer, firm) {
  var scriptProps = PropertiesService.getScriptProperties();
  var keys = scriptProps.getKeys();
  var alreadyExists = false;
  var key = '';
  
  // Structures the orderer / firm information so that the App can see if there are already orderes from this during this reporting period.
  var ordererInfoFromApp = orderer + ' (' + firm + ')';
  
  // If keys.length > 0, look for previous orders and take action.
  if (keys.length > 0) {
  
    // Cycle through values, see if there's already an instance of this orderer + firm.
    for (var i = 0; i < keys.length ; i++) {
      var ordererInfoFromProps = parseOrdererInfo(keys[i]);
      // If there's already an instance, increase the count in props and store it
      if (ordererInfoFromApp === ordererInfoFromProps) {
        alreadyExists = true;
        key = keys[i];
      };
    };

    // If previous orders exist, add one to the count and replace the value.    
    if (alreadyExists === true) {
        var count = parseOrdererCount(key);
        count++;
        var newValue = '#O#' + orderer + '#F#' + firm + '#C#' + count;
        scriptProps.setProperty(key, newValue);
        
        // If no existing instance, create a new record
    } else {
      // Create order key string using #O# as the pattern for the first three characters concatenated with the now ISO string.
      var now = new Date().toISOString();
      var key = '#K#' + now;
      
      // Create value string using #O#ordererName#F#firmName#C#count pattern and store it.
      var value = '#O#' + orderer + '#F#' + firm + '#C#' + '1';
      scriptProps.setProperty(key, value);
    };

  // If keys.length = 0, record the first order instance for this reporting period.        
  } else {
    // Create order key string using #O# as the pattern for the first three characters concatenated with the now ISO string.
    var now = new Date().toISOString();
    var key = '#K#' + now;
    
    // Create value string using #O#ordererName#F#firmName#C#count pattern and store it.
    var value = '#O#' + orderer + '#F#' + firm + '#C#' + 1;
    scriptProps.setProperty(key, value);
  }; 
};

/** Cycles through Script Properties data, structures an email for Blake, sends it, and clears the datastore. */
function sendOrderActivityReport() {
  var props = PropertiesService.getScriptProperties();
  var keys = props.getKeys();
  var reportText = 'Here\'s the ordering activity for this week:\n\nCount   Orderer\n';
  
  try {
    if (keys.length != 0) {
      // Structure email with top orderers first. 50 because the App assumes nobody is going to order more than 50x in a week.
      for (var i = 35; i > 0; i--) {
        for (var j = 0; j < keys.length; j++) {
          if(parseOrdererCount(keys[j]) === i) {
            reportText += i + '           ' + parseOrdererInfo(keys[j]) + '\n';
          };
        };  
      };
    };
    
    var date = toStringDate(new Date().toISOString());
    
    // Sends the email to Blake.
    GmailApp.sendEmail('bboyd@salegalsolutions.com', 'Order Activity Report for Week Prior to ' + date, reportText, { name: 'SALS Reporting Bot'});
    
    // Resets the Script Properties.
    deleteScriptProps();
    
  } catch (error) {
    addToDevLog('Error inside sendOrderActivityReport: ' + error);
  };
};

////////////////////////////////////////////////////////////////////////////////////
////////////////// RECORDING ANY APPLICATION ERRORS FOR DEVELOPER //////////////////
////////////////////////////////////////////////////////////////////////////////////

/** Send any errors to a developer log which is stored in this Sheet's Properties
* @param {message} string The error message generated by the Script.
*/
function addToDevLog(message) {
  var props = PropertiesService.getDocumentProperties();
  
  /** Looks for or creates a developer log */
  if (props.getProperty('devLog')) {
    var devLog = props.getProperty('devLog');
  } else {
    var devLog = 'Start Developer Log:\n';
  };
  
  /** Logs the message and stores it in props */
  message = 'On ' + new Date() + ': ' + message + '\n';
  devLog += message;
  props.setProperty('devLog', devLog);
};

/** Gets developer logs and logs them to the console */
function logDevLogs() {
  var props = PropertiesService.getDocumentProperties();
  var devLog = props.getProperty('devLog');
  Logger.log(devLog);
};

/** Clears developer logs */
function clearDevLogs() {
  var props = PropertiesService.getDocumentProperties().deleteProperty('devLog');
};


////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////// UTILITIES /////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

/** Parses Script Property value into orderer name and firm name.
@param {key} string Key to a Script Property.
@return {ordererInfo} string Order's full name, followed by their firm in parenthesis.
Note--a value looks like this: #O#Davis Jones#F#Jones Law#C#1
*/
function parseOrdererInfo(key) {
  var value = PropertiesService.getScriptProperties().getProperty(key);
  var ordererName = value.match(/#O#.*(?=#F)/)[0].slice(3);
  var firmName = value.match(/#F#.*(?=#C)/)[0].slice(3);
  var ordererInfo = ordererName + ' (' + firmName + ')';
  return ordererInfo;
};

/** Parses Script Property value to find and return order count.
@param {key} string Key to a Script Property.
@return {count} number The number of times this orderer has ordered a deposition during this reporting period.
Note--a value looks like this: #O#Davis Jones#F#Jones Law#C#1
*/
function parseOrdererCount(key) {
  var value = PropertiesService.getScriptProperties().getProperty(key);
  var count = parseInt(value.match(/#C#.*/)[0].slice(3));
  return count;
};

/** Provides visibility into Script Properties keys. */
function seeScriptPropsKeys() {
  var keys = PropertiesService.getScriptProperties().getKeys();
  Logger.log(keys);
};

/** Provides visibility into Script Properties values. */
function seeScriptPropsValues() {
  var keys = PropertiesService.getScriptProperties().getKeys();
  keys.forEach(function(key) {
    var value = PropertiesService.getScriptProperties().getProperty(key);
    Logger.log(value);
  });
};

/** Provides visibility into Document Properties values (where dev logs are). */
function seeDevLogs() {
  var keys = PropertiesService.getDocumentProperties().getKeys();
  keys.forEach(function(key) {
    var value = PropertiesService.getDocumentProperties().getProperty(key);
    Logger.log(value);
  });
};

/** Wipes Script Properties. */
function deleteScriptProps() {
  var keys = PropertiesService.getScriptProperties().deleteAllProperties();
};

/** Sets dummy data for Script Properties */
function setDummyScriptPropsData() {
  var props = PropertiesService.getScriptProperties();
  props.setProperty('#K#2020-01-07T21:54:02.589Z', '#O#Davis Jones#F#Meg Media Inc.#C#4');
  props.setProperty('#K#2020-02-07T21:54:02.589Z', '#O#Sandra Smith#F#Judo Law Firm#C#1');
  props.setProperty('#K#2020-02-07T20:54:02.589Z', '#O#Bill Paxton#F#Coffee Legal Inc.#C#1');
  props.setProperty('#K#2020-03-07T22:54:02.589Z', '#O#Dolly Parton#F#Hippy Law LLC#C#6');
  props.setProperty('#K#2020-03-07T23:54:02.589Z', '#O#Johnny Cash#F#BBQ Legal Fund#C#7');
  props.setProperty('#K#2020-03-07T23:55:02.589Z', '#O#Willie Nelson#F#Sushi Legal International#C#1');
  props.setProperty('#K#2020-04-07T10:54:02.589Z', '#O#Jimi Hendrix#F#Jones Day Legal#C#1');
  props.setProperty('#K#2020-04-07T11:54:02.589Z', '#O#John Medeski#F#San Antonio Law LLC#C#1');
};

/** Manually adds a script prop for Blake's report. */
function manuallyAddScriptProp() {
  addOrderToLog('Millennium Video', 'Lopez Law Goup PLLC');
};











